// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_INCLUDED_packet_2eproto
#define PROTOBUF_INCLUDED_packet_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_packet_2eproto 

namespace protobuf_packet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_packet_2eproto
namespace packet {
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace packet
namespace google {
namespace protobuf {
template<> ::packet::Packet* Arena::CreateMaybeMessage<::packet::Packet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace packet {

// ===================================================================

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packet.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(NULL);
  }

  Packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string to = 6;
  int to_size() const;
  void clear_to();
  static const int kToFieldNumber = 6;
  const ::std::string& to(int index) const;
  ::std::string* mutable_to(int index);
  void set_to(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_to(int index, ::std::string&& value);
  #endif
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  ::std::string* add_to();
  void add_to(const ::std::string& value);
  #if LANG_CXX11
  void add_to(::std::string&& value);
  #endif
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& to() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_to();

  // repeated string from = 7;
  int from_size() const;
  void clear_from();
  static const int kFromFieldNumber = 7;
  const ::std::string& from(int index) const;
  ::std::string* mutable_from(int index);
  void set_from(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_from(int index, ::std::string&& value);
  #endif
  void set_from(int index, const char* value);
  void set_from(int index, const char* value, size_t size);
  ::std::string* add_from();
  void add_from(const ::std::string& value);
  #if LANG_CXX11
  void add_from(::std::string&& value);
  #endif
  void add_from(const char* value);
  void add_from(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& from() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_from();

  // repeated string subject = 8;
  int subject_size() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 8;
  const ::std::string& subject(int index) const;
  ::std::string* mutable_subject(int index);
  void set_subject(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subject(int index, ::std::string&& value);
  #endif
  void set_subject(int index, const char* value);
  void set_subject(int index, const char* value, size_t size);
  ::std::string* add_subject();
  void add_subject(const ::std::string& value);
  #if LANG_CXX11
  void add_subject(::std::string&& value);
  #endif
  void add_subject(const char* value);
  void add_subject(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subject() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subject();

  // repeated string msg = 9;
  int msg_size() const;
  void clear_msg();
  static const int kMsgFieldNumber = 9;
  const ::std::string& msg(int index) const;
  ::std::string* mutable_msg(int index);
  void set_msg(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_msg(int index, ::std::string&& value);
  #endif
  void set_msg(int index, const char* value);
  void set_msg(int index, const char* value, size_t size);
  ::std::string* add_msg();
  void add_msg(const ::std::string& value);
  #if LANG_CXX11
  void add_msg(::std::string&& value);
  #endif
  void add_msg(const char* value);
  void add_msg(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& msg() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msg();

  // repeated string all_users = 10;
  int all_users_size() const;
  void clear_all_users();
  static const int kAllUsersFieldNumber = 10;
  const ::std::string& all_users(int index) const;
  ::std::string* mutable_all_users(int index);
  void set_all_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_all_users(int index, ::std::string&& value);
  #endif
  void set_all_users(int index, const char* value);
  void set_all_users(int index, const char* value, size_t size);
  ::std::string* add_all_users();
  void add_all_users(const ::std::string& value);
  #if LANG_CXX11
  void add_all_users(::std::string&& value);
  #endif
  void add_all_users(const char* value);
  void add_all_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& all_users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_all_users();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string salt = 4;
  void clear_salt();
  static const int kSaltFieldNumber = 4;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_salt(::std::string&& value);
  #endif
  void set_salt(const char* value);
  void set_salt(const char* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // string pubKey = 5;
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 5;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // string error = 11;
  void clear_error();
  static const int kErrorFieldNumber = 11;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // int32 OP = 1;
  void clear_op();
  static const int kOPFieldNumber = 1;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packet.Packet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> to_;
  ::google::protobuf::RepeatedPtrField< ::std::string> from_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subject_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msg_;
  ::google::protobuf::RepeatedPtrField< ::std::string> all_users_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 op_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_packet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// int32 OP = 1;
inline void Packet::clear_op() {
  op_ = 0;
}
inline ::google::protobuf::int32 Packet::op() const {
  // @@protoc_insertion_point(field_get:packet.Packet.OP)
  return op_;
}
inline void Packet::set_op(::google::protobuf::int32 value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:packet.Packet.OP)
}

// string name = 2;
inline void Packet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::name() const {
  // @@protoc_insertion_point(field_get:packet.Packet.name)
  return name_.GetNoArena();
}
inline void Packet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.Packet.name)
}
#if LANG_CXX11
inline void Packet::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.Packet.name)
}
#endif
inline void Packet::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.Packet.name)
}
inline void Packet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.name)
}
inline ::std::string* Packet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:packet.Packet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_name() {
  // @@protoc_insertion_point(field_release:packet.Packet.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.name)
}

// string password = 3;
inline void Packet::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::password() const {
  // @@protoc_insertion_point(field_get:packet.Packet.password)
  return password_.GetNoArena();
}
inline void Packet::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.Packet.password)
}
#if LANG_CXX11
inline void Packet::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.Packet.password)
}
#endif
inline void Packet::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.Packet.password)
}
inline void Packet::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.password)
}
inline ::std::string* Packet::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:packet.Packet.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_password() {
  // @@protoc_insertion_point(field_release:packet.Packet.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.password)
}

// string salt = 4;
inline void Packet::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::salt() const {
  // @@protoc_insertion_point(field_get:packet.Packet.salt)
  return salt_.GetNoArena();
}
inline void Packet::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.Packet.salt)
}
#if LANG_CXX11
inline void Packet::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.Packet.salt)
}
#endif
inline void Packet::set_salt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.Packet.salt)
}
inline void Packet::set_salt(const char* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.salt)
}
inline ::std::string* Packet::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:packet.Packet.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_salt() {
  // @@protoc_insertion_point(field_release:packet.Packet.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.salt)
}

// string pubKey = 5;
inline void Packet::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::pubkey() const {
  // @@protoc_insertion_point(field_get:packet.Packet.pubKey)
  return pubkey_.GetNoArena();
}
inline void Packet::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.Packet.pubKey)
}
#if LANG_CXX11
inline void Packet::set_pubkey(::std::string&& value) {
  
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.Packet.pubKey)
}
#endif
inline void Packet::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.Packet.pubKey)
}
inline void Packet::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.pubKey)
}
inline ::std::string* Packet::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:packet.Packet.pubKey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_pubkey() {
  // @@protoc_insertion_point(field_release:packet.Packet.pubKey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.pubKey)
}

// repeated string to = 6;
inline int Packet::to_size() const {
  return to_.size();
}
inline void Packet::clear_to() {
  to_.Clear();
}
inline const ::std::string& Packet::to(int index) const {
  // @@protoc_insertion_point(field_get:packet.Packet.to)
  return to_.Get(index);
}
inline ::std::string* Packet::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:packet.Packet.to)
  return to_.Mutable(index);
}
inline void Packet::set_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.to)
  to_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Packet::set_to(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.to)
  to_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Packet::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.Packet.to)
}
inline void Packet::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.to)
}
inline ::std::string* Packet::add_to() {
  // @@protoc_insertion_point(field_add_mutable:packet.Packet.to)
  return to_.Add();
}
inline void Packet::add_to(const ::std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.Packet.to)
}
#if LANG_CXX11
inline void Packet::add_to(::std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.Packet.to)
}
#endif
inline void Packet::add_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.Packet.to)
}
inline void Packet::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.Packet.to)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Packet::to() const {
  // @@protoc_insertion_point(field_list:packet.Packet.to)
  return to_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Packet::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:packet.Packet.to)
  return &to_;
}

// repeated string from = 7;
inline int Packet::from_size() const {
  return from_.size();
}
inline void Packet::clear_from() {
  from_.Clear();
}
inline const ::std::string& Packet::from(int index) const {
  // @@protoc_insertion_point(field_get:packet.Packet.from)
  return from_.Get(index);
}
inline ::std::string* Packet::mutable_from(int index) {
  // @@protoc_insertion_point(field_mutable:packet.Packet.from)
  return from_.Mutable(index);
}
inline void Packet::set_from(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.from)
  from_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Packet::set_from(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.from)
  from_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Packet::set_from(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.Packet.from)
}
inline void Packet::set_from(int index, const char* value, size_t size) {
  from_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.from)
}
inline ::std::string* Packet::add_from() {
  // @@protoc_insertion_point(field_add_mutable:packet.Packet.from)
  return from_.Add();
}
inline void Packet::add_from(const ::std::string& value) {
  from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.Packet.from)
}
#if LANG_CXX11
inline void Packet::add_from(::std::string&& value) {
  from_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.Packet.from)
}
#endif
inline void Packet::add_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.Packet.from)
}
inline void Packet::add_from(const char* value, size_t size) {
  from_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.Packet.from)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Packet::from() const {
  // @@protoc_insertion_point(field_list:packet.Packet.from)
  return from_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Packet::mutable_from() {
  // @@protoc_insertion_point(field_mutable_list:packet.Packet.from)
  return &from_;
}

// repeated string subject = 8;
inline int Packet::subject_size() const {
  return subject_.size();
}
inline void Packet::clear_subject() {
  subject_.Clear();
}
inline const ::std::string& Packet::subject(int index) const {
  // @@protoc_insertion_point(field_get:packet.Packet.subject)
  return subject_.Get(index);
}
inline ::std::string* Packet::mutable_subject(int index) {
  // @@protoc_insertion_point(field_mutable:packet.Packet.subject)
  return subject_.Mutable(index);
}
inline void Packet::set_subject(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.subject)
  subject_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Packet::set_subject(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.subject)
  subject_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Packet::set_subject(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subject_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.Packet.subject)
}
inline void Packet::set_subject(int index, const char* value, size_t size) {
  subject_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.subject)
}
inline ::std::string* Packet::add_subject() {
  // @@protoc_insertion_point(field_add_mutable:packet.Packet.subject)
  return subject_.Add();
}
inline void Packet::add_subject(const ::std::string& value) {
  subject_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.Packet.subject)
}
#if LANG_CXX11
inline void Packet::add_subject(::std::string&& value) {
  subject_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.Packet.subject)
}
#endif
inline void Packet::add_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subject_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.Packet.subject)
}
inline void Packet::add_subject(const char* value, size_t size) {
  subject_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.Packet.subject)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Packet::subject() const {
  // @@protoc_insertion_point(field_list:packet.Packet.subject)
  return subject_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Packet::mutable_subject() {
  // @@protoc_insertion_point(field_mutable_list:packet.Packet.subject)
  return &subject_;
}

// repeated string msg = 9;
inline int Packet::msg_size() const {
  return msg_.size();
}
inline void Packet::clear_msg() {
  msg_.Clear();
}
inline const ::std::string& Packet::msg(int index) const {
  // @@protoc_insertion_point(field_get:packet.Packet.msg)
  return msg_.Get(index);
}
inline ::std::string* Packet::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:packet.Packet.msg)
  return msg_.Mutable(index);
}
inline void Packet::set_msg(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.msg)
  msg_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Packet::set_msg(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.msg)
  msg_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Packet::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.Packet.msg)
}
inline void Packet::set_msg(int index, const char* value, size_t size) {
  msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.msg)
}
inline ::std::string* Packet::add_msg() {
  // @@protoc_insertion_point(field_add_mutable:packet.Packet.msg)
  return msg_.Add();
}
inline void Packet::add_msg(const ::std::string& value) {
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.Packet.msg)
}
#if LANG_CXX11
inline void Packet::add_msg(::std::string&& value) {
  msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.Packet.msg)
}
#endif
inline void Packet::add_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.Packet.msg)
}
inline void Packet::add_msg(const char* value, size_t size) {
  msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.Packet.msg)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Packet::msg() const {
  // @@protoc_insertion_point(field_list:packet.Packet.msg)
  return msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Packet::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:packet.Packet.msg)
  return &msg_;
}

// repeated string all_users = 10;
inline int Packet::all_users_size() const {
  return all_users_.size();
}
inline void Packet::clear_all_users() {
  all_users_.Clear();
}
inline const ::std::string& Packet::all_users(int index) const {
  // @@protoc_insertion_point(field_get:packet.Packet.all_users)
  return all_users_.Get(index);
}
inline ::std::string* Packet::mutable_all_users(int index) {
  // @@protoc_insertion_point(field_mutable:packet.Packet.all_users)
  return all_users_.Mutable(index);
}
inline void Packet::set_all_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.all_users)
  all_users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Packet::set_all_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:packet.Packet.all_users)
  all_users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Packet::set_all_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.Packet.all_users)
}
inline void Packet::set_all_users(int index, const char* value, size_t size) {
  all_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.all_users)
}
inline ::std::string* Packet::add_all_users() {
  // @@protoc_insertion_point(field_add_mutable:packet.Packet.all_users)
  return all_users_.Add();
}
inline void Packet::add_all_users(const ::std::string& value) {
  all_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.Packet.all_users)
}
#if LANG_CXX11
inline void Packet::add_all_users(::std::string&& value) {
  all_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.Packet.all_users)
}
#endif
inline void Packet::add_all_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.Packet.all_users)
}
inline void Packet::add_all_users(const char* value, size_t size) {
  all_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.Packet.all_users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Packet::all_users() const {
  // @@protoc_insertion_point(field_list:packet.Packet.all_users)
  return all_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Packet::mutable_all_users() {
  // @@protoc_insertion_point(field_mutable_list:packet.Packet.all_users)
  return &all_users_;
}

// string error = 11;
inline void Packet::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::error() const {
  // @@protoc_insertion_point(field_get:packet.Packet.error)
  return error_.GetNoArena();
}
inline void Packet::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.Packet.error)
}
#if LANG_CXX11
inline void Packet::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.Packet.error)
}
#endif
inline void Packet::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.Packet.error)
}
inline void Packet::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.Packet.error)
}
inline ::std::string* Packet::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:packet.Packet.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_error() {
  // @@protoc_insertion_point(field_release:packet.Packet.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_packet_2eproto
